{"version":3,"file":"use-epics.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { useMemo, useReducer, useEffect, useRef, useState } from 'react'\nimport {\n  BehaviorSubject,\n  Subject,\n  queueScheduler,\n  Observable,\n  Subscription\n} from 'rxjs'\nimport { observeOn, distinctUntilChanged, filter } from 'rxjs/operators'\nimport produce from 'immer'\n\n// tslint:disable:variable-name\nexport class StateObservable<S> extends Observable<S> {\n  value: S\n  __notifier: Subject<S>\n  __subscription: Subscription\n  constructor(stateSubject: Subject<S>, initialState: S) {\n    super(subscriber => {\n      const subscription = this.__notifier.subscribe(subscriber)\n      if (subscription && !subscription.closed) {\n        subscriber.next(this.value)\n      }\n      return subscription\n    })\n\n    this.value = initialState\n    this.__notifier = new Subject()\n    this.__subscription = stateSubject.subscribe(value => {\n      if (value !== this.value) {\n        this.value = value\n        this.__notifier.next(value)\n      }\n    })\n  }\n}\n\nexport type StateAndCallbacksFor<A extends Actions> = [\n  StateFor<A>,\n  CallbacksFor<A>\n]\n\nexport type StateFor<A extends Actions> = A extends Actions<infer S, any>\n  ? S\n  : never\n\nexport type CallbacksFor<A extends Actions> = A extends Actions<any, infer R>\n  ? {\n      [T in ActionUnion<R>['type']]: (\n        ...payload: ActionByType<ActionUnion<R>, T>['payload']\n      ) => void\n    }\n  : never\n\nexport type Actions<S = any, R extends ActionRecordBase<S> = any> = (\n  state: S\n) => R\n\nexport type ActionRecordBase<S = any> = Record<\n  string,\n  (...args: any[]) => S extends object ? S | void : S\n>\n\nexport type ActionUnion<R extends ActionRecordBase> = {\n  [T in keyof R]: { type: T; payload: Parameters<R[T]> }\n}[keyof R]\n\nexport type ActionByType<A, T> = A extends { type: infer T2 }\n  ? (T extends T2 ? A : never)\n  : never\n\nexport declare interface Epic<S, R extends ActionRecordBase<S>> {\n  (\n    action$: Observable<ActionUnion<R>>,\n    state$: StateObservable<S>,\n    actions: CallbacksFor<Actions<S, R>>\n  ): any\n}\n\nexport function useEpics<S, R extends ActionRecordBase<S>>(\n  createActions: Actions<S, R>,\n  initialState: S,\n  epics: Epic<S, R>[] = []\n): StateAndCallbacksFor<typeof createActions> {\n  let stateRef$ = useRef<BehaviorSubject<S> | null>(null)\n  let actionRef$ = useRef<Subject<ActionUnion<R> | null> | null>(null)\n  const [lastAction, setLastAction] = useState<ActionUnion<R> | null>(null)\n  let wrappedActions: CallbacksFor<typeof createActions> | undefined\n\n  const reducer = useMemo(() => {\n    return (produce as any)((state: S, action: ActionUnion<R>) =>\n      createActions(state)[action.type](action.payload)\n    )\n  }, [createActions])\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    stateRef$.current = new BehaviorSubject(initialState).pipe(\n      observeOn(queueScheduler),\n      distinctUntilChanged()\n    ) as BehaviorSubject<S>\n    actionRef$.current = new Subject().pipe(\n      observeOn(queueScheduler)\n    ) as Subject<ActionUnion<R> | null>\n\n    const state$ = new StateObservable(stateRef$.current, initialState)\n\n    const epics$ = epics.map(epic =>\n      epic(\n        actionRef$.current as Subject<any>,\n        state$,\n        wrappedActions as CallbacksFor<typeof createActions>\n      )\n    )\n\n    const effectSubscriptions$ = epics$.map(e => e.subscribe())\n\n    return () => effectSubscriptions$.forEach(e => e.unsubscribe())\n  }, [])\n\n  const actionTypes: ActionUnion<R>['type'][] = Object.keys(\n    createActions(initialState)\n  )\n\n  wrappedActions = useMemo(\n    () =>\n      actionTypes.reduce(\n        (acc, type) => {\n          const dispatchWithEpic = (payload: any) => {\n            const action = { type, payload } as ActionUnion<R>\n            const nextState = reducer(state, action)\n            // while an action that returns undefined is not dispatched,\n            // is is pushed into the epic to trigger side-effects\n            nextState !== undefined && dispatch(action)\n            setLastAction(action)\n          }\n          acc[type] = (...payload) => dispatchWithEpic(payload as any)\n          return acc\n        },\n        {} as CallbacksFor<typeof createActions>\n      ),\n    actionTypes\n  )\n\n  useEffect(() => {\n    if (lastAction && stateRef$.current && actionRef$.current) {\n      stateRef$.current.next(state as S)\n      actionRef$.current.next(lastAction as any)\n      setLastAction(null)\n    }\n  }, [lastAction, stateRef$.current, actionRef$.current])\n\n  return [state as S, wrappedActions]\n}\n\nexport declare function ofTypeOperator<\n  T extends ActionUnion<any>,\n  R extends T = T,\n  K extends R['type'] = R['type']\n>(...key: K[]): (source: Observable<T>) => Observable<R>\n\nexport const ofType = <T extends ActionUnion<any>>(...keys: string[]) => (\n  source: Observable<T>\n) =>\n  source.pipe(\n    filter(action => {\n      if (!action) return false\n      const { type } = action\n      const len = keys.length\n\n      if (len === 1) {\n        return type === keys[0]\n      } else {\n        for (let i = 0; i < len; i++) {\n          if (type === keys[i]) {\n            return true\n          }\n        }\n      }\n      return false\n    })\n  )\n"],"names":["StateObservable","constructor","stateSubject","initialState","subscriber","subscription","this","__notifier","subscribe","closed","next","value","Subject","__subscription","Observable","createActions","epics","wrappedActions","stateRef$","useRef","actionRef$","useState","reducer","useMemo","produce","state","action","type","payload","useReducer","useEffect","current","BehaviorSubject","pipe","observeOn","queueScheduler","distinctUntilChanged","state$","effectSubscriptions$","map","epic","e","forEach","unsubscribe","actionTypes","Object","keys","reduce","acc","undefined","dispatch","setLastAction","dispatchWithEpic","lastAction","source","filter","len","length","let","i"],"mappings":"8XAYaA,cAIXC,WAAYC,EAA0BC,mCAC9BC,OACEC,EAAeC,EAAKC,WAAWC,UAAUJ,UAC3CC,IAAiBA,EAAaI,QAChCL,EAAWM,KAAKJ,EAAKK,OAEhBN,SAGJM,MAAQR,OACRI,WAAa,IAAIK,eACjBC,eAAiBX,EAAaM,mBAAUG,GACvCA,IAAUL,EAAKK,UACZA,MAAQA,IACRJ,WAAWG,KAAKC,6FAlBWG,sDAmEtCC,EACAZ,EACAa,kBAAsB,QAKlBC,EAHAC,EAAYC,SAAkC,MAC9CC,EAAaD,SAA8C,QAC3BE,WAAgC,oBAG9DC,EAAUC,4BACNC,WAAiBC,EAAUC,UACjCX,EAAcU,GAAOC,EAAOC,MAAMD,EAAOE,YAE1C,CAACb,MAEsBc,aAAWP,EAASnB,iBAE9C2B,uBACEZ,EAAUa,QAAU,IAAIC,kBAAgB7B,GAAc8B,KACpDC,YAAUC,kBACVC,0BAEFhB,EAAWW,SAAU,IAAInB,WAAUqB,KACjCC,YAAUC,uBAGNE,EAAS,IAAIrC,EAAgBkB,EAAUa,QAAS5B,GAUhDmC,EARStB,EAAMuB,aAAIC,UACvBA,EACEpB,EAAWW,QACXM,EACApB,KAIgCsB,aAAIE,UAAKA,EAAEjC,uCAElC8B,EAAqBI,iBAAQD,UAAKA,EAAEE,kBAChD,QAEGC,EAAwCC,OAAOC,KACnD/B,EAAcZ,WAGhBc,EAAiBM,4BAEbqB,EAAYG,gBACTC,EAAKrB,UASJqB,EAAIrB,qFARsBC,OAClBF,EAAS,MAAEC,UAAMC,QAITqB,IAHI3B,EAAQG,EAAOC,IAGNwB,EAASxB,GACpCyB,EAAczB,GAEY0B,CAAiBxB,IACtCoB,GAET,KAEJJ,GAGFd,uBACMuB,GAAcnC,EAAUa,SAAWX,EAAWW,UAChDb,EAAUa,QAAQrB,KAAKe,GACvBL,EAAWW,QAAQrB,KAAK2C,GACxBF,EAAc,QAEf,CAACE,EAAYnC,EAAUa,QAASX,EAAWW,UAEvC,CAACN,EAAYR,+FAUpBqC,UAEAA,EAAOrB,KACLsB,kBAAO7B,OACAA,EAAQ,OAAO,EACZC,aACF6B,EAAMV,EAAKW,UAEL,IAARD,SACK7B,IAASmB,EAAK,OAEhBY,IAAIC,EAAI,EAAGA,EAAIH,EAAKG,OACnBhC,IAASmB,EAAKa,UACT,SAIN"}